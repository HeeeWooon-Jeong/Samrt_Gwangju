package view;

public interface expalin_MVC {
	
	// 문제점
	// 하나의 파일로만 진행하기때문에 여러명이 함께 작업하려면 모여야 한다.
	
	// 형상관리 git   2명 이상이 1개의 파일을 수정 하면 깃은 어느 것을 써야 할지 알수 없다.
	// 그래서 객체지향적으로 프로그램을 재설계 할 필요가 있다.
//	
	// 디자인 패턴
	// 문제를 방지하기 위해 정해놓은 틀

	// 가장 많이 쓰이는 MVC 패턴  -- 구조적 패턴
	// 총 3가지로 쪼개서 패턴을 만들자~
	// M / V / C
	
	// Model = 필요에 의해 만든 클래스들   - 자료형 / DB를 조작하는 코드 - JDBC
	// 특징 - 스스로 실행 X -- 도구
	
	// View = 사용자가 직접적으로 보는 화면 - Consol 창
	
	// Controller = 기능을 실행하는 주체 
	// Model 이라는 도구를 사용해서 실질적인 기능을 실행 - 
	
	// 웹 / App 개발에 위한 패턴
	
////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	
	// DAO 파일( Model )역할
	
	// 각 메소드는 SQL문을 실행하고 , 실행한 결과를 리턴
	
	
	
	
	//	MemberSystem 파일
	// Controller + view
	
	
	// MemberSystem 파일 --> DAO 				매개변수		(id, pw, age)
	// DAO 				--> MemberSystem 파일 	리턴 		(int)
	
	
	
	
	// MemberSystem 파일 --> DAO 				매개변수		(id, pw, age)
	// 이런식으로 데이터를 보내는건 좋지않다.
	// (id, pw, age) 를 하나로 포장해서 보냄
	// MemberDTO 에 포장  		(Model)형태
	
	// 필드 // 메서드
	
////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// DTO : Data Transfer Object : 계층간 데이터 전송을 위한 객체
	
	
	
	// 기본생성자 // 게터, 세터
	
	
	// for each 문
	
	
	
	
	
	
	
	
	
	
}
